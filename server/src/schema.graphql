scalar DateTime

type Query {
	# User
	user(id: ID!): User!
	users(
		query: String
		first: Int
		skip: Int
		orderBy: UserOrderByInput
	): [User!]!

	# Check auth
	checkAuth: User!

	# Hotel
	hotel(id: ID!): Hotel!
	hotels(
		query: String
		first: Int
		skip: Int
		orderBy: HotelOrderByInput
	): [Hotel!]!

	# Resident
	resident(id: ID!): Resident!
	residents(
		query: String
		first: Int
		skip: Int
		orderBy: ResidentOrderByInput
	): [Resident!]!

	# Visit
	visit(id: ID!): Visit!
	visits: [Visit!]!

	# Team
	team(id: ID!): Team!
	teams: [Team!]!

	# Sector
	sector(id: ID!): Sector!
	sectors: [Sector!]!

	# Count
	count(type: String!, query: String): Int!
}

type Mutation {
	# Auth
	login(data: LoginInput): AuthPayload!

	# User
	createUser(data: CreateUserInput): User!
	updateUser(id: ID!, data: UpdateUserInput): User!
	deleteUser(id: ID!): User!

	# Team
	createTeam(data: CreateTeamInput): Team!
	updateTeam(id: ID!, data: UpdateTeamInput): Team!
	deleteTeam(id: ID!): Team!

	# Visit
	createVisit(data: CreateVisitInput): Visit!
	updateVisit(id: ID!, data: UpdateVisitInput): Visit!
	deleteVisit(id: ID!): Visit!

	# Hotel
	createHotel(data: CreateHotelInput): Hotel!
	updateHotel(id: ID!, data: UpdateHotelInput): Hotel!
	deleteHotel(id: ID!): Hotel!

	# Sector
	createSector(data: CreateSectorInput): Sector!
	updateSector(id: ID!, data: UpdateSectorInput): Sector!
	deleteSector(id: ID!): Sector!

	# Resident
	createResident(data: CreateResidentInput): Resident!
	updateResident(id: ID!, data: UpdateResidentInput): Resident!
	deleteResident(id: ID!): Resident!
}

##	USER	##
type User {
	id: ID!
	searchIndex: String!
	firstName: String!
	lastName: String!
	role: Role!
	sector: Sector
	address: String
	email: String!
	password: String
	teams: [Team!]
	createdAt: DateTime!
	updatedAt: DateTime!
}

type AuthPayload {
	token: String
	user: User
}

input LoginInput {
	email: String!
	password: String!
}

input CreateUserInput {
	firstName: String!
	lastName: String!
	role: String!
	sector: ID
	address: String
	email: String!
	password: String
}

input UpdateUserInput {
	firstName: String
	lastName: String
	role: String
	sector: ID
	address: String
	email: String
	password: String
}

enum Role {
	USER
	ADMIN
}

enum UserOrderByInput {
	firstName_ASC
	firstName_DESC
	lastName_ASC
	lastName_DESC
	role_ASC
	role_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}

##	TEAM	##
type Team {
	id: ID!
	sector: Sector!
	users: [User!]!
	visits: [Visit!]
	startAt: DateTime!
	endAt: DateTime!
	createdAt: DateTime!
	updatedAt: DateTime!
}

input CreateTeamInput {
	users: [ID!]!
	sector: ID!
	startAt: DateTime!
	endAt: DateTime!
}

input UpdateTeamInput {
	users: [ID!]!
}

##	VISIT	##
type Visit {
	id: ID!
	date: DateTime!
	team: Team!
	hotel: Hotel!
	priority: Boolean!
	status: VisitStatus!
	createdAt: DateTime!
	updatedAt: DateTime!
}

input CreateVisitInput {
	date: DateTime!
	team: ID!
	hotel: ID!
	priority: Boolean!
	status: VisitStatus!
}

input UpdateVisitInput {
	date: DateTime
	team: ID
	hotel: ID
	priority: Boolean
	status: VisitStatus
}

type Subscription {
	visit: VisitSubscriptionPayload!
}

type VisitSubscriptionPayload {
	mutation: MutationType!
	data: Visit!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

enum VisitStatus {
	UPCOMING
	ONGOING
	DONE
}

##	HOTEL	##
type Hotel {
	id: ID!
	searchIndex: String!
	uuid: Int!
	name: String!
	address: String!
	zipCode: Int!
	city: String!
	active: Boolean!
	rooms: Int!
	lastVisit: DateTime
	score: Float
	sector: Sector!
	lat: Float!
	long: Float!
	residents: [Resident!]
	createdAt: DateTime!
	updatedAt: DateTime!
}

input CreateHotelInput {
	uuid: Int!
	name: String!
	address: String!
	zipCode: Int!
	city: String!
	active: Boolean
	rooms: Int!
	lastVisit: DateTime
	score: Float
	sector: ID!
}

input UpdateHotelInput {
	uuid: Int
	name: String
	address: String
	zipCode: Int
	city: String
	status: Boolean
	rooms: Int
	lastVisit: DateTime
	score: Float
	sector: ID
}

enum HotelOrderByInput {
	name_ASC
	name_DESC
	zipCode_ASC
	zipCode_DESC
	city_ASC
	city_DESC
	active_ASC
	active_DESC
	rooms_ASC
	rooms_DESC
	lastVisit_ASC
	lastVisit_DESC
	score_ASC
	score_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}

##	SECTOR	##
type Sector {
	id: ID!
	zone: String!
	users: [User!]
	hotels: [Hotel!]
	teams: [Team!]
	createdAt: DateTime!
	updatedAt: DateTime!
}

input CreateSectorInput {
	zone: String!
}

input UpdateSectorInput {
	zone: String!
}

## RESIDENTS ##
type Resident {
	id: ID!
	firstName: String!
	lastName: String!
	phone: Int
	email: String
	dob: DateTime
	gender: Gender
	hotel: Hotel!
}

input CreateResidentInput {
	firstName: String!
	lastName: String!
	phone: Int
	email: String
	dob: DateTime
	gender: Gender
	hotel: ID!
}

input UpdateResidentInput {
	firstName: String
	lastName: String
	phone: Int
	email: String
	dob: DateTime
	gender: Gender
	hotel: ID
}

enum ResidentOrderByInput {
	lastName_ASC
	lastName_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}

enum Gender {
	MALE
	FEMALE
}
