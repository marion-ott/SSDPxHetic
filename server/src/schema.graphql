scalar DateTime

type Query {
	user(id: ID!): User!
	users(
		query: String
		first: Int
		skip: Int
		UserOrderByInput: UserOrderByInput
	): [User!]!

	hotel(id: ID!): Hotel!
	hotels(
		query: String
		first: Int
		skip: Int
		orderBy: HotelOrderByInput
	): [Hotel!]!

	sector(id: ID!): Sector!
	sectors: [Sector!]!
}

type Mutation {
	login(data: LoginInput): AuthPayload!
	createUser(data: CreateUserInput): AuthPayload!
	updateUser(id: ID!, data: UpdateUserInput): User!
	deleteUser(id: ID!): User!
	createHotel(data: CreateHotelInput): Hotel!
	updateHotel(id: ID!, data: UpdateHotelInput): Hotel!
	deleteHotel(id: ID!): Hotel!
	createSector(data: CreateSectorInput): Sector!
	updateSector(id: ID!, data: UpdateSectorInput): Sector!
	deleteSector(id: ID!): Sector!
}

##	USER	##
type User {
	id: ID!
	searchIndex: String!
	firstName: String!
	lastName: String!
	role: String!
	sector: Sector
	address: String
	email: String!
	password: String
	createdAt: DateTime!
	updatedAt: DateTime!
}

type AuthPayload {
	token: String!
	user: User!
}

input LoginInput {
	email: String!
	password: String!
}

input CreateUserInput {
	firstName: String!
	lastName: String!
	role: String!
	sector: ID
	address: String
	email: String!
	password: String
}

input UpdateUserInput {
	firstName: String
	lastName: String
	role: String
	sector: ID
	address: String
	email: String
	password: String
}

enum UserOrderByInput {
	firstName_ASC
	firstName_DESC
	lastName_ASC
	lastName_DESC
	role_ASC
	role_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}

##	HOTEL	##
type Hotel {
	id: ID!
	searchIndex: String!
	uuid: Int!
	name: String!
	address: String!
	zipCode: Int!
	city: String!
	active: Boolean!
	rooms: Int!
	lastVisit: DateTime
	score: Float
	sector: Sector!
	lat: Float!
	long: Float!
	createdAt: DateTime!
	updatedAt: DateTime!
}

input CreateHotelInput {
	uuid: Int!
	name: String!
	address: String!
	zipCode: Int!
	city: String!
	active: Boolean!
	rooms: Int!
	lastVisit: DateTime
	score: Float
	sector: ID!
}

input UpdateHotelInput {
	uuid: Int
	name: String
	address: String
	zipCode: Int
	city: String
	status: Boolean
	rooms: Int
	lastVisit: DateTime
	score: Float
	sector: ID
}

enum HotelOrderByInput {
	name_ASC
	name_DESC
	zipCode_ASC
	zipCode_DESC
	city_ASC
	city_DESC
	active_ASC
	active_DESC
	rooms_ASC
	rooms_DESC
	lastVisit_ASC
	lastVisit_DESC
	score_ASC
	score_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}

##	SECTOR	##
type Sector {
	id: ID!
	zone: String!
	users: [User!]
	hotels: [Hotel!]
	createdAt: DateTime!
	updatedAt: DateTime!
}

input CreateSectorInput {
	zone: String!
}

input UpdateSectorInput {
	zone: String!
}
