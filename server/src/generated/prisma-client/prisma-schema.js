module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHotel {
  count: Int!
}

type AggregateSector {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Hotel {
  id: ID!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  score: Float
  sector: Sector!
  lat: Float!
  long: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HotelConnection {
  pageInfo: PageInfo!
  edges: [HotelEdge]!
  aggregate: AggregateHotel!
}

input HotelCreateInput {
  id: ID
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  score: Float
  sector: SectorCreateOneWithoutHotelsInput!
  lat: Float!
  long: Float!
}

input HotelCreateManyWithoutSectorInput {
  create: [HotelCreateWithoutSectorInput!]
  connect: [HotelWhereUniqueInput!]
}

input HotelCreateWithoutSectorInput {
  id: ID
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  score: Float
  lat: Float!
  long: Float!
}

type HotelEdge {
  node: Hotel!
  cursor: String!
}

enum HotelOrderByInput {
  id_ASC
  id_DESC
  uuid_ASC
  uuid_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  zipCode_ASC
  zipCode_DESC
  city_ASC
  city_DESC
  active_ASC
  active_DESC
  rooms_ASC
  rooms_DESC
  lastVisit_ASC
  lastVisit_DESC
  score_ASC
  score_DESC
  lat_ASC
  lat_DESC
  long_ASC
  long_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HotelPreviousValues {
  id: ID!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  score: Float
  lat: Float!
  long: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input HotelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uuid: Int
  uuid_not: Int
  uuid_in: [Int!]
  uuid_not_in: [Int!]
  uuid_lt: Int
  uuid_lte: Int
  uuid_gt: Int
  uuid_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  zipCode: Int
  zipCode_not: Int
  zipCode_in: [Int!]
  zipCode_not_in: [Int!]
  zipCode_lt: Int
  zipCode_lte: Int
  zipCode_gt: Int
  zipCode_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  active: Boolean
  active_not: Boolean
  rooms: Int
  rooms_not: Int
  rooms_in: [Int!]
  rooms_not_in: [Int!]
  rooms_lt: Int
  rooms_lte: Int
  rooms_gt: Int
  rooms_gte: Int
  lastVisit: DateTime
  lastVisit_not: DateTime
  lastVisit_in: [DateTime!]
  lastVisit_not_in: [DateTime!]
  lastVisit_lt: DateTime
  lastVisit_lte: DateTime
  lastVisit_gt: DateTime
  lastVisit_gte: DateTime
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  long: Float
  long_not: Float
  long_in: [Float!]
  long_not_in: [Float!]
  long_lt: Float
  long_lte: Float
  long_gt: Float
  long_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HotelScalarWhereInput!]
  OR: [HotelScalarWhereInput!]
  NOT: [HotelScalarWhereInput!]
}

type HotelSubscriptionPayload {
  mutation: MutationType!
  node: Hotel
  updatedFields: [String!]
  previousValues: HotelPreviousValues
}

input HotelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HotelWhereInput
  AND: [HotelSubscriptionWhereInput!]
  OR: [HotelSubscriptionWhereInput!]
  NOT: [HotelSubscriptionWhereInput!]
}

input HotelUpdateInput {
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  score: Float
  sector: SectorUpdateOneRequiredWithoutHotelsInput
  lat: Float
  long: Float
}

input HotelUpdateManyDataInput {
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  score: Float
  lat: Float
  long: Float
}

input HotelUpdateManyMutationInput {
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  score: Float
  lat: Float
  long: Float
}

input HotelUpdateManyWithoutSectorInput {
  create: [HotelCreateWithoutSectorInput!]
  delete: [HotelWhereUniqueInput!]
  connect: [HotelWhereUniqueInput!]
  set: [HotelWhereUniqueInput!]
  disconnect: [HotelWhereUniqueInput!]
  update: [HotelUpdateWithWhereUniqueWithoutSectorInput!]
  upsert: [HotelUpsertWithWhereUniqueWithoutSectorInput!]
  deleteMany: [HotelScalarWhereInput!]
  updateMany: [HotelUpdateManyWithWhereNestedInput!]
}

input HotelUpdateManyWithWhereNestedInput {
  where: HotelScalarWhereInput!
  data: HotelUpdateManyDataInput!
}

input HotelUpdateWithoutSectorDataInput {
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  score: Float
  lat: Float
  long: Float
}

input HotelUpdateWithWhereUniqueWithoutSectorInput {
  where: HotelWhereUniqueInput!
  data: HotelUpdateWithoutSectorDataInput!
}

input HotelUpsertWithWhereUniqueWithoutSectorInput {
  where: HotelWhereUniqueInput!
  update: HotelUpdateWithoutSectorDataInput!
  create: HotelCreateWithoutSectorInput!
}

input HotelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uuid: Int
  uuid_not: Int
  uuid_in: [Int!]
  uuid_not_in: [Int!]
  uuid_lt: Int
  uuid_lte: Int
  uuid_gt: Int
  uuid_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  zipCode: Int
  zipCode_not: Int
  zipCode_in: [Int!]
  zipCode_not_in: [Int!]
  zipCode_lt: Int
  zipCode_lte: Int
  zipCode_gt: Int
  zipCode_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  active: Boolean
  active_not: Boolean
  rooms: Int
  rooms_not: Int
  rooms_in: [Int!]
  rooms_not_in: [Int!]
  rooms_lt: Int
  rooms_lte: Int
  rooms_gt: Int
  rooms_gte: Int
  lastVisit: DateTime
  lastVisit_not: DateTime
  lastVisit_in: [DateTime!]
  lastVisit_not_in: [DateTime!]
  lastVisit_lt: DateTime
  lastVisit_lte: DateTime
  lastVisit_gt: DateTime
  lastVisit_gte: DateTime
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  sector: SectorWhereInput
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  long: Float
  long_not: Float
  long_in: [Float!]
  long_not_in: [Float!]
  long_lt: Float
  long_lte: Float
  long_gt: Float
  long_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
}

input HotelWhereUniqueInput {
  id: ID
  uuid: Int
}

scalar Long

type Mutation {
  createHotel(data: HotelCreateInput!): Hotel!
  updateHotel(data: HotelUpdateInput!, where: HotelWhereUniqueInput!): Hotel
  updateManyHotels(data: HotelUpdateManyMutationInput!, where: HotelWhereInput): BatchPayload!
  upsertHotel(where: HotelWhereUniqueInput!, create: HotelCreateInput!, update: HotelUpdateInput!): Hotel!
  deleteHotel(where: HotelWhereUniqueInput!): Hotel
  deleteManyHotels(where: HotelWhereInput): BatchPayload!
  createSector(data: SectorCreateInput!): Sector!
  updateSector(data: SectorUpdateInput!, where: SectorWhereUniqueInput!): Sector
  updateManySectors(data: SectorUpdateManyMutationInput!, where: SectorWhereInput): BatchPayload!
  upsertSector(where: SectorWhereUniqueInput!, create: SectorCreateInput!, update: SectorUpdateInput!): Sector!
  deleteSector(where: SectorWhereUniqueInput!): Sector
  deleteManySectors(where: SectorWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  hotel(where: HotelWhereUniqueInput!): Hotel
  hotels(where: HotelWhereInput, orderBy: HotelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hotel]!
  hotelsConnection(where: HotelWhereInput, orderBy: HotelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HotelConnection!
  sector(where: SectorWhereUniqueInput!): Sector
  sectors(where: SectorWhereInput, orderBy: SectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sector]!
  sectorsConnection(where: SectorWhereInput, orderBy: SectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectorConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Sector {
  id: ID!
  zone: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  hotels(where: HotelWhereInput, orderBy: HotelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hotel!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectorConnection {
  pageInfo: PageInfo!
  edges: [SectorEdge]!
  aggregate: AggregateSector!
}

input SectorCreateInput {
  id: ID
  zone: String!
  users: UserCreateManyWithoutSectorInput
  hotels: HotelCreateManyWithoutSectorInput
}

input SectorCreateOneWithoutHotelsInput {
  create: SectorCreateWithoutHotelsInput
  connect: SectorWhereUniqueInput
}

input SectorCreateOneWithoutUsersInput {
  create: SectorCreateWithoutUsersInput
  connect: SectorWhereUniqueInput
}

input SectorCreateWithoutHotelsInput {
  id: ID
  zone: String!
  users: UserCreateManyWithoutSectorInput
}

input SectorCreateWithoutUsersInput {
  id: ID
  zone: String!
  hotels: HotelCreateManyWithoutSectorInput
}

type SectorEdge {
  node: Sector!
  cursor: String!
}

enum SectorOrderByInput {
  id_ASC
  id_DESC
  zone_ASC
  zone_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SectorPreviousValues {
  id: ID!
  zone: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectorSubscriptionPayload {
  mutation: MutationType!
  node: Sector
  updatedFields: [String!]
  previousValues: SectorPreviousValues
}

input SectorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SectorWhereInput
  AND: [SectorSubscriptionWhereInput!]
  OR: [SectorSubscriptionWhereInput!]
  NOT: [SectorSubscriptionWhereInput!]
}

input SectorUpdateInput {
  zone: String
  users: UserUpdateManyWithoutSectorInput
  hotels: HotelUpdateManyWithoutSectorInput
}

input SectorUpdateManyMutationInput {
  zone: String
}

input SectorUpdateOneRequiredWithoutHotelsInput {
  create: SectorCreateWithoutHotelsInput
  update: SectorUpdateWithoutHotelsDataInput
  upsert: SectorUpsertWithoutHotelsInput
  connect: SectorWhereUniqueInput
}

input SectorUpdateOneWithoutUsersInput {
  create: SectorCreateWithoutUsersInput
  update: SectorUpdateWithoutUsersDataInput
  upsert: SectorUpsertWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  connect: SectorWhereUniqueInput
}

input SectorUpdateWithoutHotelsDataInput {
  zone: String
  users: UserUpdateManyWithoutSectorInput
}

input SectorUpdateWithoutUsersDataInput {
  zone: String
  hotels: HotelUpdateManyWithoutSectorInput
}

input SectorUpsertWithoutHotelsInput {
  update: SectorUpdateWithoutHotelsDataInput!
  create: SectorCreateWithoutHotelsInput!
}

input SectorUpsertWithoutUsersInput {
  update: SectorUpdateWithoutUsersDataInput!
  create: SectorCreateWithoutUsersInput!
}

input SectorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  zone: String
  zone_not: String
  zone_in: [String!]
  zone_not_in: [String!]
  zone_lt: String
  zone_lte: String
  zone_gt: String
  zone_gte: String
  zone_contains: String
  zone_not_contains: String
  zone_starts_with: String
  zone_not_starts_with: String
  zone_ends_with: String
  zone_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  hotels_every: HotelWhereInput
  hotels_some: HotelWhereInput
  hotels_none: HotelWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SectorWhereInput!]
  OR: [SectorWhereInput!]
  NOT: [SectorWhereInput!]
}

input SectorWhereUniqueInput {
  id: ID
  zone: String
}

type Subscription {
  hotel(where: HotelSubscriptionWhereInput): HotelSubscriptionPayload
  sector(where: SectorSubscriptionWhereInput): SectorSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  role: String!
  sector: Sector
  address: String
  email: String!
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  role: String!
  sector: SectorCreateOneWithoutUsersInput
  address: String
  email: String!
  password: String
}

input UserCreateManyWithoutSectorInput {
  create: [UserCreateWithoutSectorInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutSectorInput {
  id: ID
  firstName: String!
  lastName: String!
  role: String!
  address: String
  email: String!
  password: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  address_ASC
  address_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  role: String!
  address: String
  email: String!
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  role: String
  sector: SectorUpdateOneWithoutUsersInput
  address: String
  email: String
  password: String
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  role: String
  address: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  role: String
  address: String
  email: String
  password: String
}

input UserUpdateManyWithoutSectorInput {
  create: [UserCreateWithoutSectorInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSectorInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSectorInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutSectorDataInput {
  firstName: String
  lastName: String
  role: String
  address: String
  email: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutSectorInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSectorDataInput!
}

input UserUpsertWithWhereUniqueWithoutSectorInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSectorDataInput!
  create: UserCreateWithoutSectorInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  sector: SectorWhereInput
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    