module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHotel {
  count: Int!
}

type AggregateResident {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateSector {
  count: Int!
}

type AggregateShift {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVisit {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

enum Gender {
  MALE
  FEMALE
}

type Hotel {
  id: ID!
  searchIndex: String!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  phone: String
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: Sector!
  lat: Float!
  long: Float!
  visits(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Visit!]
  residents(where: ResidentWhereInput, orderBy: ResidentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resident!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HotelConnection {
  pageInfo: PageInfo!
  edges: [HotelEdge]!
  aggregate: AggregateHotel!
}

input HotelCreateInput {
  id: ID
  searchIndex: String!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  phone: String
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: SectorCreateOneWithoutHotelsInput!
  lat: Float!
  long: Float!
  visits: VisitCreateManyWithoutHotelInput
  residents: ResidentCreateManyWithoutHotelInput
}

input HotelCreateManyWithoutSectorInput {
  create: [HotelCreateWithoutSectorInput!]
  connect: [HotelWhereUniqueInput!]
}

input HotelCreateOneWithoutResidentsInput {
  create: HotelCreateWithoutResidentsInput
  connect: HotelWhereUniqueInput
}

input HotelCreateOneWithoutVisitsInput {
  create: HotelCreateWithoutVisitsInput
  connect: HotelWhereUniqueInput
}

input HotelCreateWithoutResidentsInput {
  id: ID
  searchIndex: String!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  phone: String
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: SectorCreateOneWithoutHotelsInput!
  lat: Float!
  long: Float!
  visits: VisitCreateManyWithoutHotelInput
}

input HotelCreateWithoutSectorInput {
  id: ID
  searchIndex: String!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  phone: String
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  criticity: Float
  score: Float
  lat: Float!
  long: Float!
  visits: VisitCreateManyWithoutHotelInput
  residents: ResidentCreateManyWithoutHotelInput
}

input HotelCreateWithoutVisitsInput {
  id: ID
  searchIndex: String!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  phone: String
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: SectorCreateOneWithoutHotelsInput!
  lat: Float!
  long: Float!
  residents: ResidentCreateManyWithoutHotelInput
}

type HotelEdge {
  node: Hotel!
  cursor: String!
}

enum HotelOrderByInput {
  id_ASC
  id_DESC
  searchIndex_ASC
  searchIndex_DESC
  uuid_ASC
  uuid_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  zipCode_ASC
  zipCode_DESC
  city_ASC
  city_DESC
  phone_ASC
  phone_DESC
  active_ASC
  active_DESC
  rooms_ASC
  rooms_DESC
  lastVisit_ASC
  lastVisit_DESC
  criticity_ASC
  criticity_DESC
  score_ASC
  score_DESC
  lat_ASC
  lat_DESC
  long_ASC
  long_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HotelPreviousValues {
  id: ID!
  searchIndex: String!
  uuid: Int!
  name: String!
  address: String!
  zipCode: Int!
  city: String!
  phone: String
  active: Boolean!
  rooms: Int!
  lastVisit: DateTime
  criticity: Float
  score: Float
  lat: Float!
  long: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input HotelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  searchIndex: String
  searchIndex_not: String
  searchIndex_in: [String!]
  searchIndex_not_in: [String!]
  searchIndex_lt: String
  searchIndex_lte: String
  searchIndex_gt: String
  searchIndex_gte: String
  searchIndex_contains: String
  searchIndex_not_contains: String
  searchIndex_starts_with: String
  searchIndex_not_starts_with: String
  searchIndex_ends_with: String
  searchIndex_not_ends_with: String
  uuid: Int
  uuid_not: Int
  uuid_in: [Int!]
  uuid_not_in: [Int!]
  uuid_lt: Int
  uuid_lte: Int
  uuid_gt: Int
  uuid_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  zipCode: Int
  zipCode_not: Int
  zipCode_in: [Int!]
  zipCode_not_in: [Int!]
  zipCode_lt: Int
  zipCode_lte: Int
  zipCode_gt: Int
  zipCode_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  active: Boolean
  active_not: Boolean
  rooms: Int
  rooms_not: Int
  rooms_in: [Int!]
  rooms_not_in: [Int!]
  rooms_lt: Int
  rooms_lte: Int
  rooms_gt: Int
  rooms_gte: Int
  lastVisit: DateTime
  lastVisit_not: DateTime
  lastVisit_in: [DateTime!]
  lastVisit_not_in: [DateTime!]
  lastVisit_lt: DateTime
  lastVisit_lte: DateTime
  lastVisit_gt: DateTime
  lastVisit_gte: DateTime
  criticity: Float
  criticity_not: Float
  criticity_in: [Float!]
  criticity_not_in: [Float!]
  criticity_lt: Float
  criticity_lte: Float
  criticity_gt: Float
  criticity_gte: Float
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  long: Float
  long_not: Float
  long_in: [Float!]
  long_not_in: [Float!]
  long_lt: Float
  long_lte: Float
  long_gt: Float
  long_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HotelScalarWhereInput!]
  OR: [HotelScalarWhereInput!]
  NOT: [HotelScalarWhereInput!]
}

type HotelSubscriptionPayload {
  mutation: MutationType!
  node: Hotel
  updatedFields: [String!]
  previousValues: HotelPreviousValues
}

input HotelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HotelWhereInput
  AND: [HotelSubscriptionWhereInput!]
  OR: [HotelSubscriptionWhereInput!]
  NOT: [HotelSubscriptionWhereInput!]
}

input HotelUpdateInput {
  searchIndex: String
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  phone: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: SectorUpdateOneRequiredWithoutHotelsInput
  lat: Float
  long: Float
  visits: VisitUpdateManyWithoutHotelInput
  residents: ResidentUpdateManyWithoutHotelInput
}

input HotelUpdateManyDataInput {
  searchIndex: String
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  phone: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  criticity: Float
  score: Float
  lat: Float
  long: Float
}

input HotelUpdateManyMutationInput {
  searchIndex: String
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  phone: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  criticity: Float
  score: Float
  lat: Float
  long: Float
}

input HotelUpdateManyWithoutSectorInput {
  create: [HotelCreateWithoutSectorInput!]
  delete: [HotelWhereUniqueInput!]
  connect: [HotelWhereUniqueInput!]
  set: [HotelWhereUniqueInput!]
  disconnect: [HotelWhereUniqueInput!]
  update: [HotelUpdateWithWhereUniqueWithoutSectorInput!]
  upsert: [HotelUpsertWithWhereUniqueWithoutSectorInput!]
  deleteMany: [HotelScalarWhereInput!]
  updateMany: [HotelUpdateManyWithWhereNestedInput!]
}

input HotelUpdateManyWithWhereNestedInput {
  where: HotelScalarWhereInput!
  data: HotelUpdateManyDataInput!
}

input HotelUpdateOneRequiredWithoutResidentsInput {
  create: HotelCreateWithoutResidentsInput
  update: HotelUpdateWithoutResidentsDataInput
  upsert: HotelUpsertWithoutResidentsInput
  connect: HotelWhereUniqueInput
}

input HotelUpdateOneWithoutVisitsInput {
  create: HotelCreateWithoutVisitsInput
  update: HotelUpdateWithoutVisitsDataInput
  upsert: HotelUpsertWithoutVisitsInput
  delete: Boolean
  disconnect: Boolean
  connect: HotelWhereUniqueInput
}

input HotelUpdateWithoutResidentsDataInput {
  searchIndex: String
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  phone: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: SectorUpdateOneRequiredWithoutHotelsInput
  lat: Float
  long: Float
  visits: VisitUpdateManyWithoutHotelInput
}

input HotelUpdateWithoutSectorDataInput {
  searchIndex: String
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  phone: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  criticity: Float
  score: Float
  lat: Float
  long: Float
  visits: VisitUpdateManyWithoutHotelInput
  residents: ResidentUpdateManyWithoutHotelInput
}

input HotelUpdateWithoutVisitsDataInput {
  searchIndex: String
  uuid: Int
  name: String
  address: String
  zipCode: Int
  city: String
  phone: String
  active: Boolean
  rooms: Int
  lastVisit: DateTime
  criticity: Float
  score: Float
  sector: SectorUpdateOneRequiredWithoutHotelsInput
  lat: Float
  long: Float
  residents: ResidentUpdateManyWithoutHotelInput
}

input HotelUpdateWithWhereUniqueWithoutSectorInput {
  where: HotelWhereUniqueInput!
  data: HotelUpdateWithoutSectorDataInput!
}

input HotelUpsertWithoutResidentsInput {
  update: HotelUpdateWithoutResidentsDataInput!
  create: HotelCreateWithoutResidentsInput!
}

input HotelUpsertWithoutVisitsInput {
  update: HotelUpdateWithoutVisitsDataInput!
  create: HotelCreateWithoutVisitsInput!
}

input HotelUpsertWithWhereUniqueWithoutSectorInput {
  where: HotelWhereUniqueInput!
  update: HotelUpdateWithoutSectorDataInput!
  create: HotelCreateWithoutSectorInput!
}

input HotelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  searchIndex: String
  searchIndex_not: String
  searchIndex_in: [String!]
  searchIndex_not_in: [String!]
  searchIndex_lt: String
  searchIndex_lte: String
  searchIndex_gt: String
  searchIndex_gte: String
  searchIndex_contains: String
  searchIndex_not_contains: String
  searchIndex_starts_with: String
  searchIndex_not_starts_with: String
  searchIndex_ends_with: String
  searchIndex_not_ends_with: String
  uuid: Int
  uuid_not: Int
  uuid_in: [Int!]
  uuid_not_in: [Int!]
  uuid_lt: Int
  uuid_lte: Int
  uuid_gt: Int
  uuid_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  zipCode: Int
  zipCode_not: Int
  zipCode_in: [Int!]
  zipCode_not_in: [Int!]
  zipCode_lt: Int
  zipCode_lte: Int
  zipCode_gt: Int
  zipCode_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  active: Boolean
  active_not: Boolean
  rooms: Int
  rooms_not: Int
  rooms_in: [Int!]
  rooms_not_in: [Int!]
  rooms_lt: Int
  rooms_lte: Int
  rooms_gt: Int
  rooms_gte: Int
  lastVisit: DateTime
  lastVisit_not: DateTime
  lastVisit_in: [DateTime!]
  lastVisit_not_in: [DateTime!]
  lastVisit_lt: DateTime
  lastVisit_lte: DateTime
  lastVisit_gt: DateTime
  lastVisit_gte: DateTime
  criticity: Float
  criticity_not: Float
  criticity_in: [Float!]
  criticity_not_in: [Float!]
  criticity_lt: Float
  criticity_lte: Float
  criticity_gt: Float
  criticity_gte: Float
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  sector: SectorWhereInput
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  long: Float
  long_not: Float
  long_in: [Float!]
  long_not_in: [Float!]
  long_lt: Float
  long_lte: Float
  long_gt: Float
  long_gte: Float
  visits_every: VisitWhereInput
  visits_some: VisitWhereInput
  visits_none: VisitWhereInput
  residents_every: ResidentWhereInput
  residents_some: ResidentWhereInput
  residents_none: ResidentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
}

input HotelWhereUniqueInput {
  id: ID
  uuid: Int
}

scalar Long

type Mutation {
  createHotel(data: HotelCreateInput!): Hotel!
  updateHotel(data: HotelUpdateInput!, where: HotelWhereUniqueInput!): Hotel
  updateManyHotels(data: HotelUpdateManyMutationInput!, where: HotelWhereInput): BatchPayload!
  upsertHotel(where: HotelWhereUniqueInput!, create: HotelCreateInput!, update: HotelUpdateInput!): Hotel!
  deleteHotel(where: HotelWhereUniqueInput!): Hotel
  deleteManyHotels(where: HotelWhereInput): BatchPayload!
  createResident(data: ResidentCreateInput!): Resident!
  updateResident(data: ResidentUpdateInput!, where: ResidentWhereUniqueInput!): Resident
  updateManyResidents(data: ResidentUpdateManyMutationInput!, where: ResidentWhereInput): BatchPayload!
  upsertResident(where: ResidentWhereUniqueInput!, create: ResidentCreateInput!, update: ResidentUpdateInput!): Resident!
  deleteResident(where: ResidentWhereUniqueInput!): Resident
  deleteManyResidents(where: ResidentWhereInput): BatchPayload!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateManySchedules(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
  createSector(data: SectorCreateInput!): Sector!
  updateSector(data: SectorUpdateInput!, where: SectorWhereUniqueInput!): Sector
  updateManySectors(data: SectorUpdateManyMutationInput!, where: SectorWhereInput): BatchPayload!
  upsertSector(where: SectorWhereUniqueInput!, create: SectorCreateInput!, update: SectorUpdateInput!): Sector!
  deleteSector(where: SectorWhereUniqueInput!): Sector
  deleteManySectors(where: SectorWhereInput): BatchPayload!
  createShift(data: ShiftCreateInput!): Shift!
  updateShift(data: ShiftUpdateInput!, where: ShiftWhereUniqueInput!): Shift
  updateManyShifts(data: ShiftUpdateManyMutationInput!, where: ShiftWhereInput): BatchPayload!
  upsertShift(where: ShiftWhereUniqueInput!, create: ShiftCreateInput!, update: ShiftUpdateInput!): Shift!
  deleteShift(where: ShiftWhereUniqueInput!): Shift
  deleteManyShifts(where: ShiftWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVisit(data: VisitCreateInput!): Visit!
  updateVisit(data: VisitUpdateInput!, where: VisitWhereUniqueInput!): Visit
  updateManyVisits(data: VisitUpdateManyMutationInput!, where: VisitWhereInput): BatchPayload!
  upsertVisit(where: VisitWhereUniqueInput!, create: VisitCreateInput!, update: VisitUpdateInput!): Visit!
  deleteVisit(where: VisitWhereUniqueInput!): Visit
  deleteManyVisits(where: VisitWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  hotel(where: HotelWhereUniqueInput!): Hotel
  hotels(where: HotelWhereInput, orderBy: HotelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hotel]!
  hotelsConnection(where: HotelWhereInput, orderBy: HotelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HotelConnection!
  resident(where: ResidentWhereUniqueInput!): Resident
  residents(where: ResidentWhereInput, orderBy: ResidentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resident]!
  residentsConnection(where: ResidentWhereInput, orderBy: ResidentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResidentConnection!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  sector(where: SectorWhereUniqueInput!): Sector
  sectors(where: SectorWhereInput, orderBy: SectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sector]!
  sectorsConnection(where: SectorWhereInput, orderBy: SectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectorConnection!
  shift(where: ShiftWhereUniqueInput!): Shift
  shifts(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shift]!
  shiftsConnection(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShiftConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  visit(where: VisitWhereUniqueInput!): Visit
  visits(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Visit]!
  visitsConnection(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VisitConnection!
  node(id: ID!): Node
}

type Resident {
  id: ID!
  firstName: String!
  lastName: String!
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
  hotel: Hotel!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ResidentConnection {
  pageInfo: PageInfo!
  edges: [ResidentEdge]!
  aggregate: AggregateResident!
}

input ResidentCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
  hotel: HotelCreateOneWithoutResidentsInput!
}

input ResidentCreateManyWithoutHotelInput {
  create: [ResidentCreateWithoutHotelInput!]
  connect: [ResidentWhereUniqueInput!]
}

input ResidentCreateWithoutHotelInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
}

type ResidentEdge {
  node: Resident!
  cursor: String!
}

enum ResidentOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  dob_ASC
  dob_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResidentPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ResidentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ResidentScalarWhereInput!]
  OR: [ResidentScalarWhereInput!]
  NOT: [ResidentScalarWhereInput!]
}

type ResidentSubscriptionPayload {
  mutation: MutationType!
  node: Resident
  updatedFields: [String!]
  previousValues: ResidentPreviousValues
}

input ResidentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResidentWhereInput
  AND: [ResidentSubscriptionWhereInput!]
  OR: [ResidentSubscriptionWhereInput!]
  NOT: [ResidentSubscriptionWhereInput!]
}

input ResidentUpdateInput {
  firstName: String
  lastName: String
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
  hotel: HotelUpdateOneRequiredWithoutResidentsInput
}

input ResidentUpdateManyDataInput {
  firstName: String
  lastName: String
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
}

input ResidentUpdateManyMutationInput {
  firstName: String
  lastName: String
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
}

input ResidentUpdateManyWithoutHotelInput {
  create: [ResidentCreateWithoutHotelInput!]
  delete: [ResidentWhereUniqueInput!]
  connect: [ResidentWhereUniqueInput!]
  set: [ResidentWhereUniqueInput!]
  disconnect: [ResidentWhereUniqueInput!]
  update: [ResidentUpdateWithWhereUniqueWithoutHotelInput!]
  upsert: [ResidentUpsertWithWhereUniqueWithoutHotelInput!]
  deleteMany: [ResidentScalarWhereInput!]
  updateMany: [ResidentUpdateManyWithWhereNestedInput!]
}

input ResidentUpdateManyWithWhereNestedInput {
  where: ResidentScalarWhereInput!
  data: ResidentUpdateManyDataInput!
}

input ResidentUpdateWithoutHotelDataInput {
  firstName: String
  lastName: String
  phone: Int
  email: String
  dob: DateTime
  gender: Gender
}

input ResidentUpdateWithWhereUniqueWithoutHotelInput {
  where: ResidentWhereUniqueInput!
  data: ResidentUpdateWithoutHotelDataInput!
}

input ResidentUpsertWithWhereUniqueWithoutHotelInput {
  where: ResidentWhereUniqueInput!
  update: ResidentUpdateWithoutHotelDataInput!
  create: ResidentCreateWithoutHotelInput!
}

input ResidentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  hotel: HotelWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ResidentWhereInput!]
  OR: [ResidentWhereInput!]
  NOT: [ResidentWhereInput!]
}

input ResidentWhereUniqueInput {
  id: ID
  email: String
}

enum Role {
  USER
  ADMIN
}

type Schedule {
  id: ID!
  shift: Shift!
  sector: Sector!
  startDate: DateTime!
  endDate: DateTime!
}

type ScheduleConnection {
  pageInfo: PageInfo!
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  id: ID
  shift: ShiftCreateOneWithoutSchedulesInput!
  sector: SectorCreateOneWithoutSchedulesInput!
  startDate: DateTime!
  endDate: DateTime!
}

input ScheduleCreateManyWithoutSectorInput {
  create: [ScheduleCreateWithoutSectorInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateManyWithoutShiftInput {
  create: [ScheduleCreateWithoutShiftInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateWithoutSectorInput {
  id: ID
  shift: ShiftCreateOneWithoutSchedulesInput!
  startDate: DateTime!
  endDate: DateTime!
}

input ScheduleCreateWithoutShiftInput {
  id: ID
  sector: SectorCreateOneWithoutSchedulesInput!
  startDate: DateTime!
  endDate: DateTime!
}

type ScheduleEdge {
  node: Schedule!
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
}

type SchedulePreviousValues {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
}

input ScheduleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  AND: [ScheduleScalarWhereInput!]
  OR: [ScheduleScalarWhereInput!]
  NOT: [ScheduleScalarWhereInput!]
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
  AND: [ScheduleSubscriptionWhereInput!]
  OR: [ScheduleSubscriptionWhereInput!]
  NOT: [ScheduleSubscriptionWhereInput!]
}

input ScheduleUpdateInput {
  shift: ShiftUpdateOneRequiredWithoutSchedulesInput
  sector: SectorUpdateOneRequiredWithoutSchedulesInput
  startDate: DateTime
  endDate: DateTime
}

input ScheduleUpdateManyDataInput {
  startDate: DateTime
  endDate: DateTime
}

input ScheduleUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
}

input ScheduleUpdateManyWithoutSectorInput {
  create: [ScheduleCreateWithoutSectorInput!]
  delete: [ScheduleWhereUniqueInput!]
  connect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  update: [ScheduleUpdateWithWhereUniqueWithoutSectorInput!]
  upsert: [ScheduleUpsertWithWhereUniqueWithoutSectorInput!]
  deleteMany: [ScheduleScalarWhereInput!]
  updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
}

input ScheduleUpdateManyWithoutShiftInput {
  create: [ScheduleCreateWithoutShiftInput!]
  delete: [ScheduleWhereUniqueInput!]
  connect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  update: [ScheduleUpdateWithWhereUniqueWithoutShiftInput!]
  upsert: [ScheduleUpsertWithWhereUniqueWithoutShiftInput!]
  deleteMany: [ScheduleScalarWhereInput!]
  updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
}

input ScheduleUpdateManyWithWhereNestedInput {
  where: ScheduleScalarWhereInput!
  data: ScheduleUpdateManyDataInput!
}

input ScheduleUpdateWithoutSectorDataInput {
  shift: ShiftUpdateOneRequiredWithoutSchedulesInput
  startDate: DateTime
  endDate: DateTime
}

input ScheduleUpdateWithoutShiftDataInput {
  sector: SectorUpdateOneRequiredWithoutSchedulesInput
  startDate: DateTime
  endDate: DateTime
}

input ScheduleUpdateWithWhereUniqueWithoutSectorInput {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateWithoutSectorDataInput!
}

input ScheduleUpdateWithWhereUniqueWithoutShiftInput {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateWithoutShiftDataInput!
}

input ScheduleUpsertWithWhereUniqueWithoutSectorInput {
  where: ScheduleWhereUniqueInput!
  update: ScheduleUpdateWithoutSectorDataInput!
  create: ScheduleCreateWithoutSectorInput!
}

input ScheduleUpsertWithWhereUniqueWithoutShiftInput {
  where: ScheduleWhereUniqueInput!
  update: ScheduleUpdateWithoutShiftDataInput!
  create: ScheduleCreateWithoutShiftInput!
}

input ScheduleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  shift: ShiftWhereInput
  sector: SectorWhereInput
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Sector {
  id: ID!
  zone: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  hotels(where: HotelWhereInput, orderBy: HotelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hotel!]
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectorConnection {
  pageInfo: PageInfo!
  edges: [SectorEdge]!
  aggregate: AggregateSector!
}

input SectorCreateInput {
  id: ID
  zone: String!
  users: UserCreateManyWithoutSectorInput
  hotels: HotelCreateManyWithoutSectorInput
  teams: TeamCreateManyWithoutSectorInput
  schedules: ScheduleCreateManyWithoutSectorInput
}

input SectorCreateOneWithoutHotelsInput {
  create: SectorCreateWithoutHotelsInput
  connect: SectorWhereUniqueInput
}

input SectorCreateOneWithoutSchedulesInput {
  create: SectorCreateWithoutSchedulesInput
  connect: SectorWhereUniqueInput
}

input SectorCreateOneWithoutTeamsInput {
  create: SectorCreateWithoutTeamsInput
  connect: SectorWhereUniqueInput
}

input SectorCreateOneWithoutUsersInput {
  create: SectorCreateWithoutUsersInput
  connect: SectorWhereUniqueInput
}

input SectorCreateWithoutHotelsInput {
  id: ID
  zone: String!
  users: UserCreateManyWithoutSectorInput
  teams: TeamCreateManyWithoutSectorInput
  schedules: ScheduleCreateManyWithoutSectorInput
}

input SectorCreateWithoutSchedulesInput {
  id: ID
  zone: String!
  users: UserCreateManyWithoutSectorInput
  hotels: HotelCreateManyWithoutSectorInput
  teams: TeamCreateManyWithoutSectorInput
}

input SectorCreateWithoutTeamsInput {
  id: ID
  zone: String!
  users: UserCreateManyWithoutSectorInput
  hotels: HotelCreateManyWithoutSectorInput
  schedules: ScheduleCreateManyWithoutSectorInput
}

input SectorCreateWithoutUsersInput {
  id: ID
  zone: String!
  hotels: HotelCreateManyWithoutSectorInput
  teams: TeamCreateManyWithoutSectorInput
  schedules: ScheduleCreateManyWithoutSectorInput
}

type SectorEdge {
  node: Sector!
  cursor: String!
}

enum SectorOrderByInput {
  id_ASC
  id_DESC
  zone_ASC
  zone_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SectorPreviousValues {
  id: ID!
  zone: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectorSubscriptionPayload {
  mutation: MutationType!
  node: Sector
  updatedFields: [String!]
  previousValues: SectorPreviousValues
}

input SectorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SectorWhereInput
  AND: [SectorSubscriptionWhereInput!]
  OR: [SectorSubscriptionWhereInput!]
  NOT: [SectorSubscriptionWhereInput!]
}

input SectorUpdateInput {
  zone: String
  users: UserUpdateManyWithoutSectorInput
  hotels: HotelUpdateManyWithoutSectorInput
  teams: TeamUpdateManyWithoutSectorInput
  schedules: ScheduleUpdateManyWithoutSectorInput
}

input SectorUpdateManyMutationInput {
  zone: String
}

input SectorUpdateOneRequiredWithoutHotelsInput {
  create: SectorCreateWithoutHotelsInput
  update: SectorUpdateWithoutHotelsDataInput
  upsert: SectorUpsertWithoutHotelsInput
  connect: SectorWhereUniqueInput
}

input SectorUpdateOneRequiredWithoutSchedulesInput {
  create: SectorCreateWithoutSchedulesInput
  update: SectorUpdateWithoutSchedulesDataInput
  upsert: SectorUpsertWithoutSchedulesInput
  connect: SectorWhereUniqueInput
}

input SectorUpdateOneRequiredWithoutTeamsInput {
  create: SectorCreateWithoutTeamsInput
  update: SectorUpdateWithoutTeamsDataInput
  upsert: SectorUpsertWithoutTeamsInput
  connect: SectorWhereUniqueInput
}

input SectorUpdateOneWithoutUsersInput {
  create: SectorCreateWithoutUsersInput
  update: SectorUpdateWithoutUsersDataInput
  upsert: SectorUpsertWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  connect: SectorWhereUniqueInput
}

input SectorUpdateWithoutHotelsDataInput {
  zone: String
  users: UserUpdateManyWithoutSectorInput
  teams: TeamUpdateManyWithoutSectorInput
  schedules: ScheduleUpdateManyWithoutSectorInput
}

input SectorUpdateWithoutSchedulesDataInput {
  zone: String
  users: UserUpdateManyWithoutSectorInput
  hotels: HotelUpdateManyWithoutSectorInput
  teams: TeamUpdateManyWithoutSectorInput
}

input SectorUpdateWithoutTeamsDataInput {
  zone: String
  users: UserUpdateManyWithoutSectorInput
  hotels: HotelUpdateManyWithoutSectorInput
  schedules: ScheduleUpdateManyWithoutSectorInput
}

input SectorUpdateWithoutUsersDataInput {
  zone: String
  hotels: HotelUpdateManyWithoutSectorInput
  teams: TeamUpdateManyWithoutSectorInput
  schedules: ScheduleUpdateManyWithoutSectorInput
}

input SectorUpsertWithoutHotelsInput {
  update: SectorUpdateWithoutHotelsDataInput!
  create: SectorCreateWithoutHotelsInput!
}

input SectorUpsertWithoutSchedulesInput {
  update: SectorUpdateWithoutSchedulesDataInput!
  create: SectorCreateWithoutSchedulesInput!
}

input SectorUpsertWithoutTeamsInput {
  update: SectorUpdateWithoutTeamsDataInput!
  create: SectorCreateWithoutTeamsInput!
}

input SectorUpsertWithoutUsersInput {
  update: SectorUpdateWithoutUsersDataInput!
  create: SectorCreateWithoutUsersInput!
}

input SectorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  zone: String
  zone_not: String
  zone_in: [String!]
  zone_not_in: [String!]
  zone_lt: String
  zone_lte: String
  zone_gt: String
  zone_gte: String
  zone_contains: String
  zone_not_contains: String
  zone_starts_with: String
  zone_not_starts_with: String
  zone_ends_with: String
  zone_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  hotels_every: HotelWhereInput
  hotels_some: HotelWhereInput
  hotels_none: HotelWhereInput
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  schedules_every: ScheduleWhereInput
  schedules_some: ScheduleWhereInput
  schedules_none: ScheduleWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SectorWhereInput!]
  OR: [SectorWhereInput!]
  NOT: [SectorWhereInput!]
}

input SectorWhereUniqueInput {
  id: ID
  zone: String
}

type Shift {
  id: ID!
  index: Int!
  startTime: String!
  endTime: String!
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule!]
}

type ShiftConnection {
  pageInfo: PageInfo!
  edges: [ShiftEdge]!
  aggregate: AggregateShift!
}

input ShiftCreateInput {
  id: ID
  index: Int!
  startTime: String!
  endTime: String!
  schedules: ScheduleCreateManyWithoutShiftInput
}

input ShiftCreateOneWithoutSchedulesInput {
  create: ShiftCreateWithoutSchedulesInput
  connect: ShiftWhereUniqueInput
}

input ShiftCreateWithoutSchedulesInput {
  id: ID
  index: Int!
  startTime: String!
  endTime: String!
}

type ShiftEdge {
  node: Shift!
  cursor: String!
}

enum ShiftOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
}

type ShiftPreviousValues {
  id: ID!
  index: Int!
  startTime: String!
  endTime: String!
}

type ShiftSubscriptionPayload {
  mutation: MutationType!
  node: Shift
  updatedFields: [String!]
  previousValues: ShiftPreviousValues
}

input ShiftSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShiftWhereInput
  AND: [ShiftSubscriptionWhereInput!]
  OR: [ShiftSubscriptionWhereInput!]
  NOT: [ShiftSubscriptionWhereInput!]
}

input ShiftUpdateInput {
  index: Int
  startTime: String
  endTime: String
  schedules: ScheduleUpdateManyWithoutShiftInput
}

input ShiftUpdateManyMutationInput {
  index: Int
  startTime: String
  endTime: String
}

input ShiftUpdateOneRequiredWithoutSchedulesInput {
  create: ShiftCreateWithoutSchedulesInput
  update: ShiftUpdateWithoutSchedulesDataInput
  upsert: ShiftUpsertWithoutSchedulesInput
  connect: ShiftWhereUniqueInput
}

input ShiftUpdateWithoutSchedulesDataInput {
  index: Int
  startTime: String
  endTime: String
}

input ShiftUpsertWithoutSchedulesInput {
  update: ShiftUpdateWithoutSchedulesDataInput!
  create: ShiftCreateWithoutSchedulesInput!
}

input ShiftWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  startTime: String
  startTime_not: String
  startTime_in: [String!]
  startTime_not_in: [String!]
  startTime_lt: String
  startTime_lte: String
  startTime_gt: String
  startTime_gte: String
  startTime_contains: String
  startTime_not_contains: String
  startTime_starts_with: String
  startTime_not_starts_with: String
  startTime_ends_with: String
  startTime_not_ends_with: String
  endTime: String
  endTime_not: String
  endTime_in: [String!]
  endTime_not_in: [String!]
  endTime_lt: String
  endTime_lte: String
  endTime_gt: String
  endTime_gte: String
  endTime_contains: String
  endTime_not_contains: String
  endTime_starts_with: String
  endTime_not_starts_with: String
  endTime_ends_with: String
  endTime_not_ends_with: String
  schedules_every: ScheduleWhereInput
  schedules_some: ScheduleWhereInput
  schedules_none: ScheduleWhereInput
  AND: [ShiftWhereInput!]
  OR: [ShiftWhereInput!]
  NOT: [ShiftWhereInput!]
}

input ShiftWhereUniqueInput {
  id: ID
  index: Int
}

type Subscription {
  hotel(where: HotelSubscriptionWhereInput): HotelSubscriptionPayload
  resident(where: ResidentSubscriptionWhereInput): ResidentSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
  sector(where: SectorSubscriptionWhereInput): SectorSubscriptionPayload
  shift(where: ShiftSubscriptionWhereInput): ShiftSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  visit(where: VisitSubscriptionWhereInput): VisitSubscriptionPayload
}

type Team {
  id: ID!
  sector: Sector!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  visits(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Visit!]
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  sector: SectorCreateOneWithoutTeamsInput!
  users: UserCreateManyWithoutTeamsInput
  visits: VisitCreateManyWithoutTeamInput
  startDate: DateTime!
  endDate: DateTime!
}

input TeamCreateManyWithoutSectorInput {
  create: [TeamCreateWithoutSectorInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateManyWithoutUsersInput {
  create: [TeamCreateWithoutUsersInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneWithoutVisitsInput {
  create: TeamCreateWithoutVisitsInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutSectorInput {
  id: ID
  users: UserCreateManyWithoutTeamsInput
  visits: VisitCreateManyWithoutTeamInput
  startDate: DateTime!
  endDate: DateTime!
}

input TeamCreateWithoutUsersInput {
  id: ID
  sector: SectorCreateOneWithoutTeamsInput!
  visits: VisitCreateManyWithoutTeamInput
  startDate: DateTime!
  endDate: DateTime!
}

input TeamCreateWithoutVisitsInput {
  id: ID
  sector: SectorCreateOneWithoutTeamsInput!
  users: UserCreateManyWithoutTeamsInput
  startDate: DateTime!
  endDate: DateTime!
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TeamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  NOT: [TeamScalarWhereInput!]
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  sector: SectorUpdateOneRequiredWithoutTeamsInput
  users: UserUpdateManyWithoutTeamsInput
  visits: VisitUpdateManyWithoutTeamInput
  startDate: DateTime
  endDate: DateTime
}

input TeamUpdateManyDataInput {
  startDate: DateTime
  endDate: DateTime
}

input TeamUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
}

input TeamUpdateManyWithoutSectorInput {
  create: [TeamCreateWithoutSectorInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutSectorInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutSectorInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithoutUsersInput {
  create: [TeamCreateWithoutUsersInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput!
  data: TeamUpdateManyDataInput!
}

input TeamUpdateOneRequiredWithoutVisitsInput {
  create: TeamCreateWithoutVisitsInput
  update: TeamUpdateWithoutVisitsDataInput
  upsert: TeamUpsertWithoutVisitsInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutSectorDataInput {
  users: UserUpdateManyWithoutTeamsInput
  visits: VisitUpdateManyWithoutTeamInput
  startDate: DateTime
  endDate: DateTime
}

input TeamUpdateWithoutUsersDataInput {
  sector: SectorUpdateOneRequiredWithoutTeamsInput
  visits: VisitUpdateManyWithoutTeamInput
  startDate: DateTime
  endDate: DateTime
}

input TeamUpdateWithoutVisitsDataInput {
  sector: SectorUpdateOneRequiredWithoutTeamsInput
  users: UserUpdateManyWithoutTeamsInput
  startDate: DateTime
  endDate: DateTime
}

input TeamUpdateWithWhereUniqueWithoutSectorInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutSectorDataInput!
}

input TeamUpdateWithWhereUniqueWithoutUsersInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutUsersDataInput!
}

input TeamUpsertWithoutVisitsInput {
  update: TeamUpdateWithoutVisitsDataInput!
  create: TeamCreateWithoutVisitsInput!
}

input TeamUpsertWithWhereUniqueWithoutSectorInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutSectorDataInput!
  create: TeamCreateWithoutSectorInput!
}

input TeamUpsertWithWhereUniqueWithoutUsersInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutUsersDataInput!
  create: TeamCreateWithoutUsersInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sector: SectorWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  visits_every: VisitWhereInput
  visits_some: VisitWhereInput
  visits_none: VisitWhereInput
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  searchIndex: String!
  firstName: String!
  lastName: String!
  role: Role!
  sector: Sector
  address: String
  email: String!
  phone: String
  password: String
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  searchIndex: String!
  firstName: String!
  lastName: String!
  role: Role!
  sector: SectorCreateOneWithoutUsersInput
  address: String
  email: String!
  phone: String
  password: String
  teams: TeamCreateManyWithoutUsersInput
}

input UserCreateManyWithoutSectorInput {
  create: [UserCreateWithoutSectorInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeamsInput {
  create: [UserCreateWithoutTeamsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutSectorInput {
  id: ID
  searchIndex: String!
  firstName: String!
  lastName: String!
  role: Role!
  address: String
  email: String!
  phone: String
  password: String
  teams: TeamCreateManyWithoutUsersInput
}

input UserCreateWithoutTeamsInput {
  id: ID
  searchIndex: String!
  firstName: String!
  lastName: String!
  role: Role!
  sector: SectorCreateOneWithoutUsersInput
  address: String
  email: String!
  phone: String
  password: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  searchIndex_ASC
  searchIndex_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  address_ASC
  address_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  searchIndex: String!
  firstName: String!
  lastName: String!
  role: Role!
  address: String
  email: String!
  phone: String
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  searchIndex: String
  searchIndex_not: String
  searchIndex_in: [String!]
  searchIndex_not_in: [String!]
  searchIndex_lt: String
  searchIndex_lte: String
  searchIndex_gt: String
  searchIndex_gte: String
  searchIndex_contains: String
  searchIndex_not_contains: String
  searchIndex_starts_with: String
  searchIndex_not_starts_with: String
  searchIndex_ends_with: String
  searchIndex_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  searchIndex: String
  firstName: String
  lastName: String
  role: Role
  sector: SectorUpdateOneWithoutUsersInput
  address: String
  email: String
  phone: String
  password: String
  teams: TeamUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  searchIndex: String
  firstName: String
  lastName: String
  role: Role
  address: String
  email: String
  phone: String
  password: String
}

input UserUpdateManyMutationInput {
  searchIndex: String
  firstName: String
  lastName: String
  role: Role
  address: String
  email: String
  phone: String
  password: String
}

input UserUpdateManyWithoutSectorInput {
  create: [UserCreateWithoutSectorInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSectorInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSectorInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutTeamsInput {
  create: [UserCreateWithoutTeamsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutSectorDataInput {
  searchIndex: String
  firstName: String
  lastName: String
  role: Role
  address: String
  email: String
  phone: String
  password: String
  teams: TeamUpdateManyWithoutUsersInput
}

input UserUpdateWithoutTeamsDataInput {
  searchIndex: String
  firstName: String
  lastName: String
  role: Role
  sector: SectorUpdateOneWithoutUsersInput
  address: String
  email: String
  phone: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutSectorInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSectorDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeamsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamsDataInput!
}

input UserUpsertWithWhereUniqueWithoutSectorInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSectorDataInput!
  create: UserCreateWithoutSectorInput!
}

input UserUpsertWithWhereUniqueWithoutTeamsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamsDataInput!
  create: UserCreateWithoutTeamsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  searchIndex: String
  searchIndex_not: String
  searchIndex_in: [String!]
  searchIndex_not_in: [String!]
  searchIndex_lt: String
  searchIndex_lte: String
  searchIndex_gt: String
  searchIndex_gte: String
  searchIndex_contains: String
  searchIndex_not_contains: String
  searchIndex_starts_with: String
  searchIndex_not_starts_with: String
  searchIndex_ends_with: String
  searchIndex_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  sector: SectorWhereInput
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Visit {
  id: ID!
  date: DateTime!
  team: Team!
  hotel: Hotel
  priority: Boolean!
  status: VisitStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VisitConnection {
  pageInfo: PageInfo!
  edges: [VisitEdge]!
  aggregate: AggregateVisit!
}

input VisitCreateInput {
  id: ID
  date: DateTime!
  team: TeamCreateOneWithoutVisitsInput!
  hotel: HotelCreateOneWithoutVisitsInput
  priority: Boolean!
  status: VisitStatus!
}

input VisitCreateManyWithoutHotelInput {
  create: [VisitCreateWithoutHotelInput!]
  connect: [VisitWhereUniqueInput!]
}

input VisitCreateManyWithoutTeamInput {
  create: [VisitCreateWithoutTeamInput!]
  connect: [VisitWhereUniqueInput!]
}

input VisitCreateWithoutHotelInput {
  id: ID
  date: DateTime!
  team: TeamCreateOneWithoutVisitsInput!
  priority: Boolean!
  status: VisitStatus!
}

input VisitCreateWithoutTeamInput {
  id: ID
  date: DateTime!
  hotel: HotelCreateOneWithoutVisitsInput
  priority: Boolean!
  status: VisitStatus!
}

type VisitEdge {
  node: Visit!
  cursor: String!
}

enum VisitOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  priority_ASC
  priority_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VisitPreviousValues {
  id: ID!
  date: DateTime!
  priority: Boolean!
  status: VisitStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VisitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  priority: Boolean
  priority_not: Boolean
  status: VisitStatus
  status_not: VisitStatus
  status_in: [VisitStatus!]
  status_not_in: [VisitStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VisitScalarWhereInput!]
  OR: [VisitScalarWhereInput!]
  NOT: [VisitScalarWhereInput!]
}

enum VisitStatus {
  UPCOMING
  ONGOING
  DONE
}

type VisitSubscriptionPayload {
  mutation: MutationType!
  node: Visit
  updatedFields: [String!]
  previousValues: VisitPreviousValues
}

input VisitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VisitWhereInput
  AND: [VisitSubscriptionWhereInput!]
  OR: [VisitSubscriptionWhereInput!]
  NOT: [VisitSubscriptionWhereInput!]
}

input VisitUpdateInput {
  date: DateTime
  team: TeamUpdateOneRequiredWithoutVisitsInput
  hotel: HotelUpdateOneWithoutVisitsInput
  priority: Boolean
  status: VisitStatus
}

input VisitUpdateManyDataInput {
  date: DateTime
  priority: Boolean
  status: VisitStatus
}

input VisitUpdateManyMutationInput {
  date: DateTime
  priority: Boolean
  status: VisitStatus
}

input VisitUpdateManyWithoutHotelInput {
  create: [VisitCreateWithoutHotelInput!]
  delete: [VisitWhereUniqueInput!]
  connect: [VisitWhereUniqueInput!]
  set: [VisitWhereUniqueInput!]
  disconnect: [VisitWhereUniqueInput!]
  update: [VisitUpdateWithWhereUniqueWithoutHotelInput!]
  upsert: [VisitUpsertWithWhereUniqueWithoutHotelInput!]
  deleteMany: [VisitScalarWhereInput!]
  updateMany: [VisitUpdateManyWithWhereNestedInput!]
}

input VisitUpdateManyWithoutTeamInput {
  create: [VisitCreateWithoutTeamInput!]
  delete: [VisitWhereUniqueInput!]
  connect: [VisitWhereUniqueInput!]
  set: [VisitWhereUniqueInput!]
  disconnect: [VisitWhereUniqueInput!]
  update: [VisitUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [VisitUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [VisitScalarWhereInput!]
  updateMany: [VisitUpdateManyWithWhereNestedInput!]
}

input VisitUpdateManyWithWhereNestedInput {
  where: VisitScalarWhereInput!
  data: VisitUpdateManyDataInput!
}

input VisitUpdateWithoutHotelDataInput {
  date: DateTime
  team: TeamUpdateOneRequiredWithoutVisitsInput
  priority: Boolean
  status: VisitStatus
}

input VisitUpdateWithoutTeamDataInput {
  date: DateTime
  hotel: HotelUpdateOneWithoutVisitsInput
  priority: Boolean
  status: VisitStatus
}

input VisitUpdateWithWhereUniqueWithoutHotelInput {
  where: VisitWhereUniqueInput!
  data: VisitUpdateWithoutHotelDataInput!
}

input VisitUpdateWithWhereUniqueWithoutTeamInput {
  where: VisitWhereUniqueInput!
  data: VisitUpdateWithoutTeamDataInput!
}

input VisitUpsertWithWhereUniqueWithoutHotelInput {
  where: VisitWhereUniqueInput!
  update: VisitUpdateWithoutHotelDataInput!
  create: VisitCreateWithoutHotelInput!
}

input VisitUpsertWithWhereUniqueWithoutTeamInput {
  where: VisitWhereUniqueInput!
  update: VisitUpdateWithoutTeamDataInput!
  create: VisitCreateWithoutTeamInput!
}

input VisitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  team: TeamWhereInput
  hotel: HotelWhereInput
  priority: Boolean
  priority_not: Boolean
  status: VisitStatus
  status_not: VisitStatus
  status_in: [VisitStatus!]
  status_not_in: [VisitStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VisitWhereInput!]
  OR: [VisitWhereInput!]
  NOT: [VisitWhereInput!]
}

input VisitWhereUniqueInput {
  id: ID
}
`
      }
    